const TELEGRAM_BOT_TOKEN = import.meta.env.VITE_TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = import.meta.env.VITE_TELEGRAM_CHAT_ID;

export const sendTelegramMessage = async (text: string): Promise<boolean> => {
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    console.error(`Telegram credentials are not configured`);
    return false;
  }
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: text,
        parse_mode: 'HTML'
      })
    });
    if (!response.ok) {
      throw new Error('Failed to send telegram message');
    }
    return true;
  } catch (error) {
    console.error('Error sending telegram message:', error);
    return false;
  }
};

export const formatOrderMessage = (formData: {
  firstName: string;
  lastName: string;
  phone: string;
  email: string;
  message?: string;
}, items: Array<{
  name: string;
  quantity: number;
  price: number;
}>, totalPrice: number) => {
  const message = `
üéÅ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>

üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ò–º—è: ${formData.firstName}
‚Ä¢ –§–∞–º–∏–ª–∏—è: ${formData.lastName}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
‚Ä¢ Email: ${formData.email}
${formData.message ? `\nüí≠ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥–æ—Å—Ç—è:</b>\n${formData.message}` : ''}

üõç <b>–ó–∞–∫–∞–∑:</b>
${items.map(item => `‚Ä¢ ${item.name} (${item.quantity} —à—Ç.) - ${(item.price * item.quantity).toLocaleString()} ‚ÇΩ`).join('\n')}

üí∞ <b>–ò—Ç–æ–≥–æ:</b> ${totalPrice.toLocaleString()} ‚ÇΩ
`;
  return message;
};